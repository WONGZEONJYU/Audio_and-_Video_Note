cmake_minimum_required(VERSION 3.29)
project(xlib)

set(CMAKE_CXX_STANDARD 20)

add_definitions(-DHAVE_FFMPEG)
add_definitions(-D__STDC_CONSTANT_MACROS)
add_definitions(-DHAVE_SDL2)

file(GLOB SOURCE_FILE "${CMAKE_SOURCE_DIR}/*.cpp" "${CMAKE_SOURCE_DIR}/*.hpp")

set(shared_lib ${PROJECT_NAME}_shared)
add_library(${shared_lib} SHARED ${SOURCE_FILE})

set(static_lib ${PROJECT_NAME}_static)
add_library(${static_lib} STATIC ${SOURCE_FILE})

set(LIB_OUT_PATH "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/lib")

if (WIN32)
    add_definitions(-DWINDOWS)
    set(FFMPEG_HEADERS_PATH "C:/libffmepg/include")
    set(FFMPEG_LIB_PATH "C:/libffmepg/bin")

    set(SDL_HEADERS_PATH "C:/SDL2-2.30.8/include")
    set(SDL_LIB_PATH "C:/SDL2-2.30.8/lib/x64")

    set(Vulkan_INCLUDE_DIR "C:/VulkanSDK/1.3.290.0/Include")
    set(Vulkan_LIBRARY "C:/VulkanSDK/1.3.290.0/Lib/vulkan-1.lib")

    file(GLOB FFMPEG_LIBS "${FFMPEG_LIB_PATH}/*.lib")
    file(GLOB SDL_LIBS "${SDL_LIB_PATH}/*.lib")

    set_target_properties(${static_lib} PROPERTIES OUTPUT_NAME ${static_lib})
    set_target_properties(${shared_lib} PROPERTIES OUTPUT_NAME ${shared_lib})

    #重命名静态库名字
    add_custom_command(TARGET ${static_lib} POST_BUILD COMMAND ${CMAKE_COMMAND} -E rename
            $<TARGET_FILE:${static_lib}> $<TARGET_FILE_DIR:${static_lib}>/${PROJECT_NAME}.lib
    )

    #重命名动态库名字
    add_custom_command(TARGET ${shared_lib} POST_BUILD COMMAND ${CMAKE_COMMAND} -E rename
            $<TARGET_FILE:${shared_lib}> $<TARGET_FILE_DIR:${shared_lib}>/${PROJECT_NAME}.dll
    )

elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR CMAKE_SYSTEM_NAME STREQUAL "Mac OS X")
    add_definitions(-DMACOS)
    set(FFMPEG_HEADERS_PATH "/usr/local/ffmpeg/include")
    set(FFMPEG_LIB_PATH "/usr/local/ffmpeg/lib")

    set(SDL_HEADERS_PATH "/opt/homebrew/Cellar/sdl2/2.30.8/include/SDL2")
    set(SDL_LIB_PATH "/opt/homebrew/Cellar/sdl2/2.30.8/lib")

    set(Vulkan_INCLUDE_DIR "/Users/wong/VulkanSDK/1.3.283.0/macOS/include")
    set(Vulkan_LIBRARY "/Users/wong/VulkanSDK/1.3.283.0/macOS/lib/libvulkan.dylib")

    file(GLOB FFMPEG_LIBS "${FFMPEG_LIB_PATH}/*.dylib")
    file(GLOB SDL_LIBS "${SDL_LIB_PATH}/*.dylib")

    set_target_properties(${static_lib} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
    set_target_properties(${shared_lib} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})

endif ()

set_target_properties(${static_lib} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${LIB_OUT_PATH})
set_target_properties(${shared_lib} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIB_OUT_PATH})
set_target_properties(${shared_lib} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${LIB_OUT_PATH})

include_directories(${FFMPEG_HEADERS_PATH})
include_directories(${SDL_HEADERS_PATH})
#link_directories(${FFMPEG_LIB_PATH})
#link_directories(${SDL_LIB_PATH})
find_package(Vulkan REQUIRED)
include_directories(${Vulkan_INCLUDE_DIR})

set(TARGET_INCLUDE_PATH "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/include")
if (NOT EXISTS ${TARGET_INCLUDE_PATH})
    file(MAKE_DIRECTORY ${TARGET_INCLUDE_PATH})
endif ()

set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/")

target_include_directories(${static_lib} PUBLIC include)

# Install the library and header files
install(TARGETS ${static_lib}
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin)

# Install header files
install(DIRECTORY ${TARGET_INCLUDE_PATH} DESTINATION include)

# 查找所有 .hpp 文件
file(GLOB HEADER_FILES "${CMAKE_SOURCE_DIR}/*.hpp")
# 复制这些文件到指定目录
file(COPY ${HEADER_FILES} DESTINATION ${CMAKE_BINARY_DIR}/${PROJECT_NAME}/include/)

target_link_libraries(${static_lib} ${FFMPEG_LIBS} ${SDL_LIBS})
target_link_libraries(${shared_lib} ${FFMPEG_LIBS} ${SDL_LIBS})